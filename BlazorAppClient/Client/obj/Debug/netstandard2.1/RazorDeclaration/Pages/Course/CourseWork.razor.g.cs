// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorAppClient.Client.Pages.Course
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using BlazorAppClient.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using BlazorAppClient.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Blazored.Toast.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\_Imports.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\Pages\Course\CourseWork.razor"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\Pages\Course\CourseWork.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\Pages\Course\CourseWork.razor"
           [Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/CourseWork/{course_id}")]
    public partial class CourseWork : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 196 "C:\Users\Kudzai\Documents\Visual Studio 2019\Projects\CHAPROJECT\BlazorAppClient\Client\Pages\Course\CourseWork.razor"
       
    [Parameter]
    public string course_id { get; set; }
    //private int course_percentage_complete { get; set; }
    private int course_counter = 0;
    private static string PageData = string.Empty;
    private static string page_id = string.Empty;
    private static string topic_id = string.Empty;
    private static bool has_questions = false;//does this course page/material have any questions?load questions from server
    private static bool has_board_game = false;//does this course page/material have a board game?load game from server
    private bool tree_initialized = false;
    private bool loading = false;
    private List<BlazorAppClient.Shared.Models.MUsersAnswersCourseMaterial> completed_questions_answers = null;
    private List<string> client_side_ordered_course_work = new List<string>();
    private BlazorAppClient.Shared.CurrentUser current_user = null;
    private BlazorAppClient.Shared.Models.MCourse course = null;
    //
    private BlazorAppClient.Shared.Models.MBoardGame board_game = null;
    private List<BlazorAppClient.Shared.Models.MBoardGameTitles> board_game_titles = null;
    private List<BlazorAppClient.Shared.Models.MBoardGameItems> board_game_items = null;
    //
    public string the_correct_answer_html_table;
    public string my_selected_answer_html_table;
    public string is_my_answer_correct;
    //
    private List<BlazorAppClient.Shared.Models.MCourseWorkQuestion> course_material_questions = null;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        PageData = string.Empty;
        page_id = string.Empty;
        topic_id = string.Empty;
        has_questions = false;
        has_board_game = false;
        tree_initialized = false;
        current_user = await GetCurrentUser();
        await StartCourse();
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {
            await js.InvokeAsync<string>("initInstance", DotNetObjectReference.Create(this));
            StateHasChanged();
        }
        if (!tree_initialized)
        {
            await js.InvokeAsync<string>("initTree");
        }


    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        state.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged;
    }

    private async Task start()
    {
        await js.InvokeAsync<string>("initTree", DotNetObjectReference.Create(this));
    }

    private async Task<BlazorAppClient.Shared.CurrentUser> GetCurrentUser()
    {
        try
        {
            dynamic user_string = await local_storage.GetItemAsStringAsync("current_user");
            var current_user = JsonConvert.DeserializeObject<BlazorAppClient.Shared.CurrentUser>(user_string);
            return current_user;
        }
        catch (Exception ex)
        {
            nav.NavigateTo("/Auth/Login");
        }
        return null;
    }


    [JSInvokable]
    public async Task RenderContent(string _page_id, string page_data, string _topic_id, string _has_questions, string _has_board_game)
    {
        tree_initialized = true;
        has_questions = false;
        has_board_game = false;
        course_material_questions = null;
        if (!string.IsNullOrEmpty(page_data))
        {
            bool is_first_question = client_side_ordered_course_work.First() == _page_id;
            //toastService.ShowInfo("is_first_question: " + is_first_question);
            if (!is_first_question)
            {
                //current position
                var pos = client_side_ordered_course_work.IndexOf(_page_id);
                //toastService.ShowInfo("pos: " + pos);
                //toastService.ShowInfo("state.answers.Count: " + state.answers.Count);
                //go back one if its present render
                //else alert you must completed previous question first
                if (state.completed_pages.Count < (pos))
                {
                    toastService.ShowError("You must complete previous page first");
                    return;
                }
            }

            var base64EncodedBytes = System.Convert.FromBase64String(page_data);
            PageData = System.Text.Encoding.ASCII.GetString(base64EncodedBytes);
            page_id = _page_id;
            topic_id = _topic_id;
            has_questions = bool.Parse(_has_questions.ToLower());
            has_board_game = bool.Parse(_has_board_game.ToLower());
            if (has_questions)
            {
                await LoadQuestionsForCourseMaterial();
            }
            if (has_board_game)
            {
                await LoadBoardGameForCourseMaterial();
            }
            StateHasChanged();
        }
    }

    public async Task StartCourse()
    {
        try
        {
            var response1 = await http_client
                   .GetAsync($"Courses/StartCourse?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res.ToString() == "ok")
            {
                course = JsonConvert.DeserializeObject<BlazorAppClient.Shared.Models.MCourse>(json.data.ToString());
                List<BlazorAppClient.Shared.Models.MCourseWorkProgress> completed_pages = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MCourseWorkProgress>>(json.completed_pages.ToString());
                //
                state.SetCourse(course);
                state.SetCompletedPages(completed_pages);
                //course_percentage_complete = (state.completed_pages.Count / state.course.MCourseMaterial.Count) * 100;
                StateHasChanged();
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {
        }
    }



    /// <summary>
    /// update the course progress for this user
    /// user can only take exam when progress is completed
    /// </summary>
    private async Task SaveProgress()
    {
        loading = true;
        StateHasChanged();
        try
        {
            var content = new StringContent($"asp_net_user_id={current_user.user_id}&page_id={page_id}&course_id={course.Id}&topic_id={topic_id}",
               System.Text.Encoding.UTF8,
               "application/x-www-form-urlencoded");
            var response1 = await http_client.PostAsync("/Courses/UpdateCourseProgress", content);
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json_data = JsonConvert.DeserializeObject(response2);

            if (json_data.res.ToString() == "ok")
            {
                List<BlazorAppClient.Shared.Models.MCourseWorkProgress> completed_pages = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MCourseWorkProgress>>(json_data.completed_pages.ToString());
                state.SetCompletedPages(completed_pages);
                //course_percentage_complete = (int)(((decimal)state.completed_pages.Count / (decimal)state.course.MCourseMaterial.Count) * 100);
                StateHasChanged();
            }
            else
            {
                toastService.ShowError(json_data.data.ToString());
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// load the board game for the selected course material
    /// </summary>
    /// <returns></returns>
    public async Task LoadBoardGameForCourseMaterial()
    {
        try
        {
            var response1 = await http_client
                   .GetAsync($"Courses/LoadBoardGameForCourseMaterial?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_material_id={page_id}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res.ToString() == "ok")
            {
                board_game = JsonConvert.DeserializeObject<BlazorAppClient.Shared.Models.MBoardGame>(json.board_game.ToString());
                board_game_titles = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MBoardGameTitles>>(json.board_game_titles.ToString());
                board_game_items = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MBoardGameItems>>(json.board_game_items.ToString());

                the_correct_answer_html_table = json.the_correct_answer_html_table.ToString();
                my_selected_answer_html_table = json.my_selected_answer_html_table.ToString();
                is_my_answer_correct = json.is_my_answer_correct.ToString();

            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {
            //StateHasChanged();
        }
    }


    /// <summary>
    /// load the questions and answers for the selected page/course material
    /// load also the completed answers
    /// </summary>
    /// <returns></returns>
    public async Task LoadQuestionsForCourseMaterial()
    {
        try
        {
            var response1 = await http_client
                   .GetAsync($"Courses/LoadQuestionsForCourseMaterial?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_material_id={page_id}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res.ToString() == "ok")
            {
                course_material_questions = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MCourseWorkQuestion>>(json.data.ToString());
                completed_questions_answers = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MUsersAnswersCourseMaterial>>(json.completed_questions_answers.ToString());
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {
            //StateHasChanged();
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager nav { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private State state { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http_client { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SweetAlertService Swal { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authentication_state_provider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService local_storage { get; set; }
    }
}
#pragma warning restore 1591
