@page "/Reports/{course_id}"
@layout MainLayoutCourse

@inject HttpClient http_client
@using System.Web;

@inject IJSRuntime js

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject State state
@using System.Linq

<div class="container">

    @if (course_percentage_complete == -1)
    {
        <div class="row">
            <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
                <Loading isloading="true" height="50" width="50" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
                <p style="clear:both;">Loading reports...</p>
            </div>
        </div>
    }
    else
    {

        <div class="row">
            <div class="col-md-12">
                <h4>Course Progress</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @* course over all report *@
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated @(course_percentage_complete == 100 ? "bg-success" :
                                               course_percentage_complete >= 75 ? "bg-info" :
                                               course_percentage_complete >= 50 ? "bg-warning" :
                                               "bg-danger")"
                         role="progressbar"
                         aria-valuenow="@(course_percentage_complete)"
                         aria-valuemin="0"
                         aria-valuemax="100"
                         style="width: @(course_percentage_complete)%;">
                        <span style="color:white"> Overall @(course_percentage_complete)% </span>
                    </div>
                </div>

                @* course topics *@
                <div class="row">
                    <div class="col-md-12">
                        @foreach (var topic in topic_percentage_completed.Keys)
                        {
                            int completed = topic_percentage_completed[topic];

                            <br />
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated  @(completed == 100 ? "bg-success" :
                                               completed >= 75 ? "bg-info" :
                                               completed >= 50 ? "bg-warning" :
                                               "bg-danger")"
                                     role="progressbar"
                                     aria-valuenow="@completed"
                                     aria-valuemin="0"
                                     aria-valuemax="100"
                                     style="width: @(completed)%;">
                                    <span style="color:white"> @(topic) @(completed)% </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
        <hr />

        <div class="row">
            <div class="col-md-12">
                <h4>Course Work</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @* coursework reports *@
                <div class="accordion" id="accordionExample">
                    @foreach (var assesment in _assesments)
                    {

                        var score = _continous_assesment_marks.Where(i => i.MContinouseAssesmentIdFk == assesment.Id).FirstOrDefault();

                        <div class="card">
                            <div class="card-header" id="headingOne">
                                <div class="mb-0">
                                    <button class="btn btn-link btn-block" type="button" data-toggle="collapse" data-target="#collapse_@assesment.Id" aria-expanded="true" aria-controls="collapseOne">
                                        <div class="progress" style="width:100%!important;">
                                            <div class="progress-bar progress-bar-striped progress-bar-animated @(score?.Percentage == 100 ? "bg-success" :
                                               score?.Percentage >= 75 ? "bg-info" :
                                               score?.Percentage >= 50 ? "bg-warning" :
                                               "bg-danger")"
                                                 role="progressbar"
                                                 aria-valuenow="@(score?.Percentage)"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100"
                                                 style="width: @(score?.Percentage)%;">
                                                <span style="color:white!important;"> @assesment.AssesmentName (@((score?.Percentage ?? 0).ToString("0"))%) </span>
                                            </div>
                                        </div>
                                        <small style="color:black;">@assesment.Description</small>
                                    </button>
                                </div>
                            </div>
                            <div id="collapse_@assesment.Id" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
                                <div class="card-body">
                                    @score?.Comments
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div id="printCourseWorkPercentageChart" style="height:400px;width:100%;">
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-12">
                <h4>Exam Progress</h4>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @* exam over all report *@
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated @(exam_percentage_complete==100?"bg-success":
                                                           exam_percentage_complete>=75?"bg-info":
                                                           exam_percentage_complete>=50?"bg-warning":
                                                           "bg-danger")"
                         role="progressbar"
                         aria-valuenow="@(exam_percentage_complete)"
                         aria-valuemin="0"
                         aria-valuemax="100"
                         style="width: @(exam_percentage_complete)%;">
                        <span style="color:white"> Overall @(exam_percentage_complete)% </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div id="printExamPercentageChart" style="height:400px;width:100%;">
                </div>
            </div>
            <div class="col-md-6">
                <div style="display: flex;
                            justify-content: center;
                            align-items: center;
                            height: 400px;
                            width: 100%;
                            ">
                    <h4>Total Time</h4>
                    &nbsp;
                    &nbsp;
                    <h4>@total_time</h4>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-md-12">
                <h2>Final Score: @(over_all_percentage_score<0?0: over_all_percentage_score) %</h2>
            </div>
        </div>

    }

</div>

<BlazoredToasts Position="ToastPosition.BottomCenter"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />


@code {


    [Parameter]
    public string course_id { get; set; }

    private int course_percentage_complete = -1;
    private int exam_percentage_complete = -1;
    private Dictionary<string, int> topic_percentage_completed;
    private int exam_pass_percentage;
    private int course_work_pass_percentage;
    private int over_all_percentage_score;
    private string total_time;
    private List<BlazorAppClient.Shared.Models._MContinouseAssesment> _assesments;
    private List<BlazorAppClient.Shared.Models._MUsersAssesmentMarks> _continous_assesment_marks;

    ///private BlazorAppClient.Shared.Models.MCourse course = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override void OnInitialized()
    {
        state.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        await FetchReports();
    }

    private async Task<BlazorAppClient.Shared.CurrentUser> GetCurrentUser()
    {
        dynamic user_string = await local_storage.GetItemAsStringAsync("current_user");
        var current_user = JsonConvert.DeserializeObject<BlazorAppClient.Shared.CurrentUser>(user_string);
        return current_user;
    }


    public async Task FetchReports()
    {
        try
        {
            var current_user = await GetCurrentUser();
            var response1 = await http_client
                   .GetAsync($"Courses/FetchReports?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res.ToString() == "ok")
            {
                course_percentage_complete = JsonConvert.DeserializeObject<int>(json.course_percentage_complete.ToString());
                exam_percentage_complete = JsonConvert.DeserializeObject<int>(json.exam_percentage_complete.ToString());
                topic_percentage_completed = JsonConvert.DeserializeObject<Dictionary<string, int>>(json.topic_percentage_completed.ToString());
                exam_pass_percentage = (int)JsonConvert.DeserializeObject<double>(json.exam_pass_percentage.ToString());
                course_work_pass_percentage = (int)JsonConvert.DeserializeObject<double>(json.course_work_pass_percentage.ToString());
                over_all_percentage_score = (int)JsonConvert.DeserializeObject<double>(json.over_all_percentage_score.ToString());
                _assesments = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models._MContinouseAssesment>>(json._assesments.ToString());
                _continous_assesment_marks = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models._MUsersAssesmentMarks>>(json._continous_assesment_marks.ToString());
                total_time = json.time.ToString();
                //
                if (exam_pass_percentage < 0) exam_pass_percentage = 0;
                if (course_work_pass_percentage < 0) course_work_pass_percentage = 0;
                //
                StateHasChanged();//force rerender before printing chart
                await js.InvokeAsync<string>("printExamPercentageChart", exam_pass_percentage, (100 - exam_pass_percentage));
                await js.InvokeAsync<string>("printCourseWorkPercentageChart", course_work_pass_percentage, (100 - course_work_pass_percentage));
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {

        }
    }


}
