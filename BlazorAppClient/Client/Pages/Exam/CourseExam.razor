@page "/Exam/{course_id}"

@inject IJSRuntime js;
@inject HttpClient http_client;
@using System.Web;


@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject State state
@inject IToastService toastService

@if (course == null)
{
    <div class="row">
        <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
            <Loading isloading="true" height="50" width="50" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
            <p style="clear:both;">Loading exam...</p>
        </div>
    </div>
}
else
{


    <div id="mobile-nav"></div>
    <nav class="_nav active">
        <div class="sidebar-item. sidebar-brand" style="color:black!important;">

            <a href="/Course/@course.Id" style="color:black;font-size:22px;text-decoration:none;margin:10px;">
                <i title="back" class="fas fa-sign-out-alt flip_180"></i>
                Back
            </a>
            <hr />
            <h3 style="margin:10px;color:black;">
                <a title="@course.CourseName">
                    @(course.CourseName.Length >= 10 ? course.CourseName.Substring(0, 9) + "..." : course.CourseName)
                </a>

            </h3>
            <h4 style="margin:10px;color:Highlight;">
                <a>
                    Exam
                </a>
            </h4>

        </div>
        <br />
        <div id="html_exam" class="demo">
            <ul>
                @foreach (var topic in course.MCourseTopic.OrderBy(i => i.Sequence))
                {
                    <li data-jstree='{ "opened" : @(course_counter == 0 ? "true" : "false") }'>
                        @topic.Topic
                        <ul>
                            @{
                                int question_number = 1;
                            }
                            @foreach (var page_ in course.MQuestion.Where(i => i.MCourseTopicIdFk == topic.Id).OrderBy(i => i.QuestionSequence))
                            {
                                <li data-jstree='{ "selected" : false,"PageData":"@page_.QuestionText","QuestionID":"@page_.Id" }'>
                                    Question @question_number
                                </li>
                                @(question_number = question_number + 1)
                            }
                        </ul>
                    </li>
                    @(course_counter = course_counter + 1)
                }
            </ul>
        </div>
    </nav>


    <div class="page-wrapper white-theme sidebar-bg. bg1. toggled">
        <main class="page-content pt-2">
            <div class="container">
                @if (!string.IsNullOrEmpty(PageData))
                {
                    <div class="row">
                        <div class="col-md-12">
                            progress
                            <div class="progress">
                                <div class="progress-bar @(state.exam_percentage_complete==100?"bg-success":
                                                           state.exam_percentage_complete>=75?"bg-info":
                                                           state.exam_percentage_complete>=50?"bg-warning":
                                                           "bg-danger")"
                                     role="progressbar"
                                     style="width: @(state.exam_percentage_complete)%;"
                                     aria-valuenow="@(state.exam_percentage_complete)"
                                     aria-valuemin="0" aria-valuemax="100">@(state.exam_percentage_complete)%</div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12">
                            <small style="color:orange">Select a page to begin</small>
                        </div>
                    </div>
                }
            </div>



            @*<div id="overlay" class="overlay"></div>*@
            <div class="container-fluid p-5">
                <div class="row">
                    <div class="col-md-12">
                        @((MarkupString)PageData)
                        @if (question != null && course.MQuestionAnswerOptions != null)
                        {
                            <hr />
                            @if (state.answers.Where(i => i.QuestionIdFk == question.Id).Any())
                            {
                                <AnswersComponent question="question" course="course" />
                            }
                            else
                            {
                                <QuestionOptionsComponent question="question" course="course" />
                            }
                        }
                    </div>
                </div>
            </div>
        </main>
    </div>
}

<BlazoredToasts Position="ToastPosition.BottomCenter"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

@code {
    [Parameter]
    public string course_id { get; set; }
    private int course_counter = 0;
    private static string PageData = string.Empty;
    private bool tree_initialized = false;
    private BlazorAppClient.Shared.Models.MQuestion question = null;
    private bool show_answer = false;


    private BlazorAppClient.Shared.Models.MCourse course = null;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        PageData = string.Empty;
        await StartExam();
    }

    protected override void OnInitialized()
    {
        state.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {

            await js.InvokeAsync<string>("initInstance", DotNetObjectReference.Create(this));
            StateHasChanged();
        }
        if (!tree_initialized)
        {
            await js.InvokeAsync<string>("initTree");
        }

    }

    private async Task<BlazorAppClient.Shared.CurrentUser> GetCurrentUser()
    {
        dynamic user_string = await local_storage.GetItemAsStringAsync("current_user");
        var current_user = JsonConvert.DeserializeObject<BlazorAppClient.Shared.CurrentUser>(user_string);
        return current_user;
    }


    [JSInvokable]
    public void RenderContent(string page_data, string question_id)
    {
        tree_initialized = true;
        if (!string.IsNullOrEmpty(page_data))
        {
            var base64EncodedBytes = System.Convert.FromBase64String(page_data);
            PageData = System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
            question = course.MQuestion.Where(i => i.Id == question_id).First();
            show_answer = state.answers.Where(i => i.QuestionIdFk == question_id).Any();
            StateHasChanged();
        }
    }

    public async Task StartExam()
    {
        try
        {
            var current_user = await GetCurrentUser();
            var response1 = await http_client
                   .GetAsync($"Courses/StartExam?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res == "ok")
            {
                course = JsonConvert.DeserializeObject<BlazorAppClient.Shared.Models.MCourse>(json.data.ToString());
                var users_answers = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MUsersAnswers>>(json.users_answers.ToString());
                //
                state.SetCourse(course);
                state.SetAnswers(users_answers);
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {
        }
    }


}
