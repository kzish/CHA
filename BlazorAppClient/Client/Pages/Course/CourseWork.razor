@page "/CourseWork/{course_id}"

@inject IJSRuntime js;
@inject HttpClient http_client;
@using System.Web;


@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@if (course == null)
{
    <div class="row">
        <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
            <Loading isloading="true" height="50" width="50" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
            <p style="clear:both;">Loading course...</p>
        </div>
    </div>
}
else
{
    <div class="page-wrapper white-theme sidebar-bg. bg1. toggled">
        <nav id="sidebar" class="sidebar-wrapper">
            <div class="sidebar-content">
                <!-- sidebar-brand  -->
                <div class="sidebar-item. sidebar-brand" style="color:black!important;">
                    <a href="/Course/@course.Id"><i title="back" class="fas fa-sign-out-alt flip_180" style="color:black;font-size:22px;"></i></a><a style="color:black;" title="@course.CourseName">@(course.CourseName.Length >= 10 ? course.CourseName.Substring(0, 9) + "..." : course.CourseName)</a>
                </div>
                <hr />
                <!-- sidebar-search  -->
                <div class="sidebar-item sidebar-search">
                    <div>
                        <div class="input-group">
                            <input type="text" class="form-control search-menu" placeholder="Search...">
                            <div class="input-group-append">
                                <span class="input-group-text">
                                    <i class="fa fa-search" aria-hidden="true"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <hr />
                <!-- sidebar-menu  -->
                <div class="sidebar-item.">

                    <div id="html" class="demo">
                        <ul>
                            @foreach (var topic in course.MCourseTopic.OrderBy(i => i.Sequence))
                            {
                                <li data-jstree='{ "opened" : @(course_counter == 0 ? "true" : "false") }'>
                                    @topic.Topic
                                    <ul>
                                        @foreach (var page_ in course.MCourseMaterial.Where(i => i.MCourseTopicIdFk == topic.Id).OrderBy(i => i.PageSequence))
                                        {
                                            <li data-jstree='{ "selected" : false,"PageData":"@page_.PageData" }'>
                                                @page_.PageTitle
                                            </li>
                                        }
                                    </ul>
                                </li>
                                @(course_counter = course_counter + 1)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
        <!-- page-content  -->
        <main class="page-content pt-2">
            <div id="overlay" class="overlay"></div>
            <div class="container-fluid p-5">
                @((MarkupString)PageData)
            </div>
        </main>

    </div>
}


@code {
        [Parameter]
        public string course_id { get; set; }
    private int course_counter = 0;
    private static string PageData = string.Empty;


    private BlazorAppClient.Shared.Models.MCourse course = null;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        await StartCourse();
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        await js.InvokeAsync<string>("initTree", DotNetObjectReference.Create(this));
    }

    private async Task<BlazorAppClient.Shared.CurrentUser> GetCurrentUser()
    {
        dynamic user_string = await local_storage.GetItemAsStringAsync("current_user");
        var current_user = JsonConvert.DeserializeObject<BlazorAppClient.Shared.CurrentUser>(user_string);
        return current_user;
    }


    [JSInvokable]
    public void RenderContent(string page_data)
    {
        if (!string.IsNullOrEmpty(page_data))
        {
            PageData = page_data;
            StateHasChanged();
        }
    }

    public async Task StartCourse()
    {
        try
        {
            var current_user = await GetCurrentUser();
            var response1 = await http_client
                   .GetAsync($"Courses/StartCourse?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res == "ok")
            {
                course = JsonConvert.DeserializeObject<BlazorAppClient.Shared.Models.MCourse>(json.data.ToString());
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {

        }
    }


}
