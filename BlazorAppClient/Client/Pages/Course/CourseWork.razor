@page "/CourseWork/{course_id}"

@inject IJSRuntime js;
@inject HttpClient http_client;
@using System.Web;
@inject State state

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject NavigationManager nav

@if (course == null)
{
    <div class="row">
        <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
            <Loading isloading="true" height="50" width="50" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12" style="display:flex;align-content:center;justify-content:center;">
            <p style="clear:both;">Loading course...</p>
        </div>
    </div>
}
else
{

    <div id="mobile-nav"></div>
    <nav class="_nav active">
        <div class="sidebar-item. sidebar-brand" style="color:black!important;">

            <a href="/Course/@course.Id" style="color:black;font-size:22px;text-decoration:none;margin:10px;">
                <i title="back" class="fas fa-sign-out-alt flip_180"></i>
                Back
            </a>
            <hr />
            <h3 style="margin:10px;color:black;">
                <a title="@course.CourseName">
                    @(course.CourseName.Length >= 10 ? course.CourseName.Substring(0, 9) + "..." : course.CourseName)
                </a>

            </h3>
            <h4 style="margin:10px;color:Highlight;">
                <a>
                    Course Work
                </a>
            </h4>

        </div>
        <br />
        <div id="html_course_work" class="demo">
            <ul>
                @foreach (var topic in course.MCourseTopic.OrderBy(i => i.Sequence))
                {
                    <li data-jstree='{ "opened" : @(course_counter == 0 ? "true" : "false") }'>
                        @topic.Topic
                        <ul>
                            @foreach (var page_ in course.MCourseMaterial.Where(i => i.MCourseTopicIdFk == topic.Id).OrderBy(i => i.PageSequence))
                            {
                                <li data-jstree='{"topic_id":"@topic.Id","page_id":"@page_.Id", "selected" : false,"PageData":"@page_.PageData", "has_questions":"@page_.HasQuestions" }'>
                                    @page_.PageTitle
                                </li>
                                client_side_ordered_course_work.Add(page_.Id);
                            }
                        </ul>
                    </li>
                    @(course_counter = course_counter + 1)
                }
            </ul>
        </div>
    </nav>



    <div class="page-wrapper white-theme sidebar-bg. bg1. toggled">

        <main class="page-content pt-2">

            <div class="container">
                @if (!string.IsNullOrEmpty(PageData))
                {
                    <div class="row">
                        <div class="col-md-12">
                            progress
                            <div class="progress">
                                @*<div class="progress-bar" role="progressbar" style="width: @(course_percentage_complete)%;" aria-valuenow="@(course_percentage_complete)" aria-valuemin="0" aria-valuemax="100">@(course_percentage_complete)%</div>*@
                                <div class="progress-bar @(state.course_percentage_complete==100?"bg-success":
                                                           state.course_percentage_complete>=75?"bg-info":
                                                           state.course_percentage_complete>=50?"bg-warning":
                                                           "bg-danger")"
                                     role="progressbar"
                                     style="width: @(state.course_percentage_complete)%;"
                                     aria-valuenow="@(state.course_percentage_complete)"
                                     aria-valuemin="0" aria-valuemax="100">@(state.course_percentage_complete)%</div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12">
                            <small style="color:orange">Select a page to begin</small>
                        </div>
                    </div>
                }
            </div>


            @*<div id="overlay" class="overlay"></div>*@
            <div class="container-fluid p-5">
                @if (!string.IsNullOrEmpty(PageData))
                {
                    @((MarkupString)PageData)

                    @* button update progress *@
                    <div class="form-group">
                        @if (state.completed_pages.Where(i => i.CoursePageIdFk == page_id).Any())
                        {
                            <button class="btn btn-sm btn-warning">
                                Saved
                            </button>
                        }
                        else
                        {
                            <button @onclick="() => SaveProgress()" class="btn btn-sm btn-success">
                                <Loading isloading="loading" />
                                Save Progress
                            </button>
                            <br />
                            <small style="color:orange">Click to update progress.</small>
                        }
                    </div>
                }
            </div>

            @* Questions *@
            <div class="container-fluid p-5">
                <div class="row">
                    <div class="col-md-12">
                        @if (has_questions && course_material_questions == null)
                        {
                            <p>Loading Questions...</p>
                        }
                        else if (has_questions && course_material_questions != null)
                        {
                            <hr />
                            foreach (var question in course_material_questions.OrderBy(i => i.QuestionSequence))
                            {
                                {
                                    <CourseMaterialQuestionOptionsComponent question="question" answers="completed_questions_answers" />
                                }
                            }
                        }
                    </div>
                </div>
            </div>

        </main>

    </div>
}

<BlazoredToasts Position="ToastPosition.BottomCenter"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />


@code {
    [Parameter]
    public string course_id { get; set; }
    //private int course_percentage_complete { get; set; }
    private int course_counter = 0;
    private static string PageData = string.Empty;
    private static string page_id = string.Empty;
    private static string topic_id = string.Empty;
    private static bool has_questions = false;//does this course page/material have any questions?load questions from server
    private bool tree_initialized = false;
    private bool loading = false;
    private List<BlazorAppClient.Shared.Models.MUsersAnswersCourseMaterial> completed_questions_answers = null;
    private List<string> client_side_ordered_course_work = new List<string>();
    private BlazorAppClient.Shared.CurrentUser current_user = null;
    private BlazorAppClient.Shared.Models.MCourse course = null;

    private List<BlazorAppClient.Shared.Models.MCourseWorkQuestion> course_material_questions = null;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        PageData = string.Empty;
        page_id = string.Empty;
        topic_id = string.Empty;
        has_questions = false;
        tree_initialized = false;
        current_user = await GetCurrentUser();
        await StartCourse();
    }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (first_render)
        {
            await js.InvokeAsync<string>("initInstance", DotNetObjectReference.Create(this));
            StateHasChanged();
        }
        if (!tree_initialized)
        {
            await js.InvokeAsync<string>("initTree");
        }


    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        state.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged;
    }

    private async Task start()
    {
        await js.InvokeAsync<string>("initTree", DotNetObjectReference.Create(this));
    }

    private async Task<BlazorAppClient.Shared.CurrentUser> GetCurrentUser()
    {
        try
        {
            dynamic user_string = await local_storage.GetItemAsStringAsync("current_user");
            var current_user = JsonConvert.DeserializeObject<BlazorAppClient.Shared.CurrentUser>(user_string);
            return current_user;
        }
        catch (Exception ex)
        {
            nav.NavigateTo("/Auth/Login");
        }
        return null;
    }


    [JSInvokable]
    public async Task RenderContent(string _page_id, string page_data, string _topic_id, string _has_questions)
    {
        tree_initialized = true;
        has_questions = false;
        course_material_questions = null;
        if (!string.IsNullOrEmpty(page_data))
        {
            bool is_first_question = client_side_ordered_course_work.First() == _page_id;
            //toastService.ShowInfo("is_first_question: " + is_first_question);
            if (!is_first_question)
            {
                //current position
                var pos = client_side_ordered_course_work.IndexOf(_page_id);
                //toastService.ShowInfo("pos: " + pos);
                //toastService.ShowInfo("state.answers.Count: " + state.answers.Count);
                //go back one if its present render
                //else alert you must completed previous question first
                if (state.completed_pages.Count < (pos))
                {
                    toastService.ShowError("You must complete previous page first");
                    return;
                }
            }

            var base64EncodedBytes = System.Convert.FromBase64String(page_data);
            PageData = System.Text.Encoding.ASCII.GetString(base64EncodedBytes);
            page_id = _page_id;
            topic_id = _topic_id;
            has_questions = bool.Parse(_has_questions.ToLower());
            if (has_questions)
            {
                await LoadQuestionsForCourseMaterial();
            }
            StateHasChanged();
        }
    }

    public async Task StartCourse()
    {
        try
        {
            var response1 = await http_client
                   .GetAsync($"Courses/StartCourse?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res.ToString() == "ok")
            {
                course = JsonConvert.DeserializeObject<BlazorAppClient.Shared.Models.MCourse>(json.data.ToString());
                List<BlazorAppClient.Shared.Models.MCourseWorkProgress> completed_pages = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MCourseWorkProgress>>(json.completed_pages.ToString());
                //
                state.SetCourse(course);
                state.SetCompletedPages(completed_pages);
                //course_percentage_complete = (state.completed_pages.Count / state.course.MCourseMaterial.Count) * 100;
                StateHasChanged();
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {
        }
    }



    /// <summary>
    /// update the course progress for this user
    /// user can only take exam when progress is completed
    /// </summary>
    private async Task SaveProgress()
    {
        loading = true;
        StateHasChanged();
        try
        {
            var content = new StringContent($"asp_net_user_id={current_user.user_id}&page_id={page_id}&course_id={course.Id}&topic_id={topic_id}",
               System.Text.Encoding.UTF8,
               "application/x-www-form-urlencoded");
            var response1 = await http_client.PostAsync("/Courses/UpdateCourseProgress", content);
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json_data = JsonConvert.DeserializeObject(response2);

            if (json_data.res.ToString() == "ok")
            {
                List<BlazorAppClient.Shared.Models.MCourseWorkProgress> completed_pages = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MCourseWorkProgress>>(json_data.completed_pages.ToString());
                state.SetCompletedPages(completed_pages);
                //course_percentage_complete = (int)(((decimal)state.completed_pages.Count / (decimal)state.course.MCourseMaterial.Count) * 100);
                StateHasChanged();
            }
            else
            {
                toastService.ShowError(json_data.data.ToString());
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }


    /// <summary>
    /// load the questions and answers for the selected page/course material
    /// load also the completed answers
    /// </summary>
    /// <returns></returns>
    public async Task LoadQuestionsForCourseMaterial()
    {
        try
        {
            var response1 = await http_client
                   .GetAsync($"Courses/LoadQuestionsForCourseMaterial?asp_net_user_id={HttpUtility.UrlEncode(current_user.user_id)}&course_material_id={page_id}&course_id={course_id}");
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res.ToString() == "ok")
            {
                course_material_questions = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MCourseWorkQuestion>>(json.data.ToString());
                completed_questions_answers = JsonConvert.DeserializeObject<List<BlazorAppClient.Shared.Models.MUsersAnswersCourseMaterial>>(json.completed_questions_answers.ToString());
            }
            else
            {
                toastService.ShowError(json.data.ToString(), "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Error");
        }
        finally
        {
            //StateHasChanged();
        }
    }

}
