<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in _links)
        {
            <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code
{

    [Parameter]
    public BlazorAppClient.Shared.PaginationMetaData MetaData { get; set; }
    [Parameter]
    public int Spread { get; set; }
    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    private List<BlazorAppClient.Shared.PagingLink> _links;



    protected override void OnParametersSet()
    {
        CreatePaginationLinks();
    }


    private void CreatePaginationLinks()
    {
        //
        _links = new List<BlazorAppClient.Shared.PagingLink>();
        //add prev
        _links.Add(new BlazorAppClient.Shared.PagingLink(MetaData.CurrentPage, MetaData.HasPrevious, "Prev"));

        //add inbetween
        for (int i = 1; i <= MetaData.TotalPages; i++)
        {
            if ((i >= MetaData.CurrentPage - Spread) && (i <= MetaData.CurrentPage + Spread))
            {
                _links.Add(new BlazorAppClient.Shared.PagingLink(i, true, i.ToString()) { Active = MetaData.CurrentPage == i });
            }
        }
        //add next
        _links.Add(new BlazorAppClient.Shared.PagingLink(MetaData.CurrentPage + 1, MetaData.HasNext, "Next"));
    }

    private async Task OnSelectedPage(BlazorAppClient.Shared.PagingLink link)
    {
        if (link.Page == MetaData.CurrentPage || !link.Enabled)
            return;

        MetaData.CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }


}